//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.CallbacksServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CallbacksServiceReference.ICallbacksService", CallbackContract=typeof(WCFClient.CallbacksServiceReference.ICallbacksServiceCallback))]
    public interface ICallbacksService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallbacksService/MonitorServer", ReplyAction="http://tempuri.org/ICallbacksService/MonitorServerResponse")]
        void MonitorServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallbacksService/MonitorServer", ReplyAction="http://tempuri.org/ICallbacksService/MonitorServerResponse")]
        System.Threading.Tasks.Task MonitorServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallbacksService/UnMonitorServer", ReplyAction="http://tempuri.org/ICallbacksService/UnMonitorServerResponse")]
        void UnMonitorServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallbacksService/UnMonitorServer", ReplyAction="http://tempuri.org/ICallbacksService/UnMonitorServerResponse")]
        System.Threading.Tasks.Task UnMonitorServerAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICallbacksServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICallbacksService/NotifyClientMsg")]
        void NotifyClientMsg(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICallbacksServiceChannel : WCFClient.CallbacksServiceReference.ICallbacksService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CallbacksServiceClient : System.ServiceModel.DuplexClientBase<WCFClient.CallbacksServiceReference.ICallbacksService>, WCFClient.CallbacksServiceReference.ICallbacksService {
        
        public CallbacksServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CallbacksServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CallbacksServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CallbacksServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CallbacksServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void MonitorServer() {
            base.Channel.MonitorServer();
        }
        
        public System.Threading.Tasks.Task MonitorServerAsync() {
            return base.Channel.MonitorServerAsync();
        }
        
        public void UnMonitorServer() {
            base.Channel.UnMonitorServer();
        }
        
        public System.Threading.Tasks.Task UnMonitorServerAsync() {
            return base.Channel.UnMonitorServerAsync();
        }
    }
}
